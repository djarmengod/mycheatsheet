| AWS S3 Transfer acceleration | aws s3 cp installer.jar.gz s3://bucketname/keyname --region REGION --endpoint-url http://s3-buckets-acceleration-endpoint-name |
| List AZ's for a given region ex: For us-east-2 | aws ec2 describe-availability-zones --region us-east-2 |
| List regions | aws ec2 describe-regions --output table |
| List buckets | aws s3api list-buckets |
| List AMI id's from a region | Owners = 309956199498 is the account ID used to show Red Hat images aws ec2 describe-images --owners 309956199498 --query 'Images[*].[CreationDate,Name,ImageId]' --filters "Name=name,Values=RHEL-7.?*GA*" --region us-east-2 --output table PIPE sort -r |
| Remove aws configured credentials | rm -f ~/.aws/credentials ~/.aws/config |
| Uninstall aws cli | sudo rm -rf /usr/local/aws && sudo rm /usr/local/bin/aws |
| List images with ENA support + owners filter | aws ec2 describe-images --owners 309956199498 PIPE jq '.Images[] PIPE select(.EnaSupport == true)' |
| List image names with ENA support + owners filter | aws ec2 describe-images --owners 309956199498 PIPE jq '.Images[] PIPE select(.EnaSupport == true) PIPE .Name' |
| Assume IAM Role | aws sts assume-role --role-arn arn:aws:iam::123456789012345:role/NonProdRoute53UpdateRole --role-session-name "DNSUpdate" | grep -E '(SecretAccessKey|SessionToken|AccessKeyId)' |


## AWS ELB

### Class Loadbalancer
aws elb create-load-balancer --load-balancer-name ${clusterid}-public-master

### ALB
aws elbv2 create-load-balancer --name my-load-balancer

### NLB
aws elbv2 create-load-balancer --name my-load-balancer --type network
aws elbv2 describe-load-balancers --names my-load-balancer
aws elbv2 describe-load-balancer-attributes --load-balancer-arn arn:aws:elasticloadbalancing:REGION:ACCOUNTID:loadbalancer/net/test/85e25bf9762f3cac
aws elbv2 describe-listeners --load-balancer-arn arn:aws:elasticloadbalancing:REGION:ACCOUNTID:loadbalancer/net/test/85e25bf9762f3cac
aws elbv2 describe-target-groups --load-balancer-arn  arn:aws:elasticloadbalancing:REGION:ACCOUNTID:loadbalancer/net/test/85e25bf9762f3cac
aws elbv2 describe-target-group-attributes --target-group-arn arn:aws:elasticloadbalancing:REGION:ACCOUNTID:targetgroup/test1/bf87b3db64bf2114

## aws cli:
```
	~/.aws/credentials
		[blue]
		aws_access_key_id = XXXX
		aws_secret_access_key = XXXXXXXXXXXX

	~/.aws/config
		[blue]
		region = us-east-2

	export AWS_PROFILE="blue"

	Ensure that AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables are not set.

	Test:
		aws ec2 describe-availability-zones --region us-east-2
```

## AWS IAM Certs
aws iam upload-server-certificate --server-certificate-name ocpengcert --certificate-body file:///home/ec2-user/assets/env/domainName.cer --certificate-chain file:///home/ec2-user/assets/env/domain.chain.cer --private-key file:///home/ec2-user/assets/env/domain.key

## Placement Group
Create a Placement Group with Partition Strategy
```
aws ec2 create-placement-group --group-name "Test" --strategy "partition" --partition-count 3 --region us-east-1
```

## CloudFormation
### Create Stack via CLI
```
aws cloudformation create-stack --stack-name testCert --template-body file:///Users/kiran/Documents/python/cfAutomationBase/qa/certs/tapiWaterJi.json
```

### Flip Cloudformation templates between YAML and JSON
```
pip install cfn_flip

cfn-flip -i yaml -o json fargateClusterTemplates/fargateCluster.yml

```
### Validate Cloudformation Template
```
aws cloudformation validate-template --template-body file://ec2CF.json
```

## ECR Related:
Get Repository details
```
aws ecr describe-repositories
```
Get Docker Login
```
aws ecr get-login --region us-east-1 --no-include-email
```
Pull the Image from ECR
```
docker pull $repositoryUri
```

## CodeCommit
git remote set-url origin ssh://SSH_KEY_ID@git-codecommit.us-east-1.amazonaws.com/v1/repos/cfAutomationBase

Sample ~/.ssh/config configuration
```
Host git-codecommit.us-east-1.amazonaws.com
   User SSH_KEY_ID
   IdentityFile ~/.ssh/id_rsa

```

## RDS Related:

### Creating Read Replicas
```
aws rds create-db-instance-read-replica \
    --db-instance-identifier myreadreplica \
    --source-db-instance-identifier mydbinstance
```

### Create Read Replica in Different Region - Source DB instance provide ARN
```
aws rds create-db-instance-read-replica \
    --db-instance-identifier DBInstanceIdentifier \
    --region us-west-2 \
    --source-db-instance-identifier arn:aws:rds:us-east-1:123456789012:db:my-mysql-instance     
```

## AWS Code Pipeline
### Get CODEPipeline as Code
```
aws codepipeline get-pipeline --name PIPELINE_NAME
```

##Serverless

### Install webpack plugin
```
serverless plugin install --name serverless-webpack --stage dev
```
### Install AWS Alerts Plugin
```
npm install serverless-plugin-aws-alerts
```

### Install Python
```
brew install python3
```

### Virtual Environments
```
brew install pipenv
```

### Upgrade AWS CLI
```
pip3 install awscli --upgrade --user
```
