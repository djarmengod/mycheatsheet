Ethernet bridge administration: brctl

Container network namespace: ls -lart /var/run/docker/netns

Check if a network interface is veth: ip -d link show | grep veth

Get container pid: 
	docker inspect --format '{{.State.Pid}}' kafka-docker_zookeeper_1 
	docker inspect kafka-docker_zookeeper_1 | grep -iw pid

List namespaces for a process and get link info:
	[root@ip-172-31-44-31 netns]# ls -l /proc/21508/ns
		total 0
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 cgroup -> cgroup:[4026531835]
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 ipc -> ipc:[4026532230]
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 mnt -> mnt:[4026532228]
		lrwxrwxrwx 1 root root 0 Dec 25 04:10 net -> net:[4026532233]
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 pid -> pid:[4026532231]
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 pid_for_children -> pid:[4026532231]
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 user -> user:[4026531837]
		lrwxrwxrwx 1 root root 0 Dec 25 04:26 uts -> uts:[4026532229]
	[root@ip-172-31-44-31 netns]#
        # Required because docker deletes all containers network namespaces information from /var/run/netns
	[root@ip-172-31-44-31 netns]# ln -s /proc/21508/ns/net /var/run/netns/21508
	[root@ip-172-31-44-31 netns]# ip netns list
		21508 (id: 0)
	[root@ip-172-31-44-31 netns]# sudo ip netns exec  21508 ip link
		1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
		    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
		76: eth0@if77: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default
		    link/ether 02:42:0a:05:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0
	[root@ip-172-31-44-31 netns]#

Access from container bridge network to external network through NAT
	sudo iptables --list -t nat

Scale a service within docker-compose  docker-compose -f /etc/docker-compose.yml scale chrome=10 
Install docker-compose  sudo curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-uname -s-uname -m -o /usr/local/bin/ 
Force Recreate: If you want to force Compose to stop and recreate all containers, use the --force-recreate flag  docker-compose -f /etc/docker-compose.yml up -d --force-recreate 
Auto start compose services  crontab -e @reboot /usr/local/bin/docker-compose -f /etc/docker-compose.yml up -d Restart 
Docker GC using Sotify's image  docker run --privileged --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc:ro spotify/docker-gc 
Image layer details/history  docker history --no-trunc IMAGE_ID 
Send a specific Kill signal to a container  docker kill -s SIGKILL containerName 
Deleting all containers  docker rm $(docker ps -aq) 
Stop all containers  docker stop $(docker ps -q) 
Delete all images including intermediate ones  docker rmi -f $(docker images -q) 
To remove an image which has multiple tags - here all the tags and the image itself will be removed.  docker rmi --force  
Dockerfile declare instructions to be executed when building a child image.  Use ONBUILD instruction 
List all Privileged containers.  for name in docker ps  awk '{print $NF}'; do echo "$name --> $(docker inspect $name  grep -i Privileged)";  done 
To get Docker client to talk to the Docker engine on Docker Machine named kafka - eval $(docker-machine env kafka)
Docker machine restart - docker-machine restart default
Remove all networks not used by at least one container - docker newtork prune

Docker compose stop one service ex: docker-compose stop jenkinsservice
Stopping all services ex: docker-compose down

Remove dangling images 
	docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

Check recent logs:
	docker logs -f nexus --tail 500
Redis:
	Run a local redis container: docker run --name some-redis -d redis
	Run a redis container and connect to a remote instance: docker run -it --link some-redis:redis --rm redis redis-cli -h INSERT_PUBLIC_IP -p 6379 -a INSERT_PASSWORD
	Connect to redis and set password: 1) docker exec -it redis sh 2) redis-cli 3) config set requirepass INSERT_PASSWORD
	

Sample push to quay.io
	~/Documents/GIT/kafka-related on  master ⌚ 15:37:59
	$ docker tag ea00880d6e20 quay.io/kiran01bm/kafka-node-producer:latest

	~/Documents/GIT/kafka-related on  master ⌚ 15:38:23
	$ docker push quay.io/kiran01bm/kafka-node-producer:latest
	The push refers to repository [quay.io/kiran01bm/kafka-node-producer]
	140091ad36eb: Pushed
	7e2d22bb88c2: Pushed
	2d7a89753503: Pushed
	c4b0ce903029: Mounted from kiran01bm/kafka-node-consumer
	ed3e2b196162: Mounted from kiran01bm/kafka-node-consumer
	79f5f594bdeb: Mounted from kiran01bm/kafka-node-consumer
	8884a4e32324: Mounted from kiran01bm/kafka-node-consumer
	887d218b44a0: Mounted from kiran01bm/kafka-node-consumer
	73046094a9b8: Mounted from kiran01bm/kafka-node-consumer
	latest: digest: sha256:a207ca8a53ecd9f966fb5bc0f790bc53475ee3040aa1a7d702c17d7e4e03e335 size: 11678

