-------------------------
Node Cordon:
-------------------------
Uncordon a node - kubectl uncordon

----------
Eviction:
----------
Eviction and Drain can cause deadlocks, in which drain will wait forever.

----------------
Drain Filters: 
----------------
Drain = Cordons the node + Evicts (Eviction API) or Deletes (Delete API) the pods

The drain command uses four different filters when checking for pods to delete, and these filters can temporarily reject the drain or the drain can move on without touching certain pods or the drain can fail:

1. DaemonSet filter: The drain command proceeds only if the --ignore-daemonsets flag is set to true, but even if that is the case, it won’t delete the pod because of the DaemonSet controller
2. Mirror pods filter: Mirror pods are visible from the API server but cannot be controlled, so drain won’t delete these either.
3. Unreplicated filter: For Bare Pods drain command lets the user decide: when --force is set, unreplicated pods will be deleted (or evicted): if they’re not set, drain will fail.
4. LocalStorage filter: if --delete-local-data is set, drain will proceed even if there are pods using the emptyDir and will delete the pods and therefore delete the local data as well.

Sample approach - Ignore DaemonSets and mirror pods, and force deletes unreplicated and emptyDir pods by default.

--------------------
Log Level kubectl:
--------------------
--v=0	Generally useful for this to always be visible to a cluster operator.
--v=1	A reasonable default log level if you don’t want verbosity.
--v=2	Useful steady state information about the service and important log messages that may correlate to significant changes in the system. This is the recommended default log level for most systems.
--v=3	Extended information about changes.
--v=4	Debug level verbosity.
--v=6	Display requested resources.
--v=7	Display HTTP request headers.
--v=8	Display HTTP request contents.
--v=9	Display HTTP request contents without truncation of contents.

--------------------
minikube related:
--------------------
To check if virtualization is supported on macOS, run the following command on your terminal.
```
~/Documents/GIT ⌚ 15:39:47
$ sysctl -a | grep -E --color 'machdep.cpu.features|VMX'
machdep.cpu.features: FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC MOVBE POPCNT AES PCID XSAVE OSXSAVE SEGLIM64 TSCTMR AVX1.0 RDRAND F16C

~/Documents/GIT ⌚ 15:40:15

~/Documents/GIT/mycheatsheet on  master! ⌚ 15:42:37
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \
  && chmod +x minikube
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 54.2M  100 54.2M    0     0  4475k      0  0:00:12  0:00:12 --:--:-- 2820k

~/Documents/GIT/mycheatsheet on  master! ⌚ 15:43:15
$ sudo mv minikube /usr/local/bin
Password:

~/Documents/GIT/mycheatsheet on  master! ⌚ 15:43:29

~/Documents/Labs/kubefed ⌚ 15:45:30
$ minikube start -p cluster1 --kubernetes-version v1.13.4
😄  [cluster1] minikube v1.3.1 on Darwin 10.13.6
💿  Downloading VM boot image ...
minikube-v1.3.0.iso.sha256: 65 B / 65 B [--------------------] 100.00% ? p/s 0s
minikube-v1.3.0.iso: 131.07 MiB / 131.07 MiB [-------] 100.00% 6.50 MiB p/s 20s
🔥  Creating virtualbox VM (CPUs=2, Memory=2000MB, Disk=20000MB) ...
🐳  Preparing Kubernetes v1.13.4 on Docker 18.09.8 ...
💾  Downloading kubeadm v1.13.4
💾  Downloading kubelet v1.13.4
🚜  Pulling images ...
🚀  Launching Kubernetes ...
⌛  Waiting for: apiserver proxy etcd scheduler controller dns
🏄  Done! kubectl is now configured to use "cluster1"

~/Documents/Labs/kubefed ⌚ 15:49:58
$ minikube start -p cluster2 --kubernetes-version v1.13.4
😄  [cluster2] minikube v1.3.1 on Darwin 10.13.6
🔥  Creating virtualbox VM (CPUs=2, Memory=2000MB, Disk=20000MB) ...
🐳  Preparing Kubernetes v1.13.4 on Docker 18.09.8 ...
🚜  Pulling images ...
🚀  Launching Kubernetes ...
⌛  Waiting for: apiserver proxy etcd scheduler controller dns
🏄  Done! kubectl is now configured to use "cluster2"

~/Documents/Labs/kubefed ⌚ 16:13:19
$
```

## Adhoc Commands
List all resource types in a format that can be used with kubectl get
```
kubectl api-resources --verbs=list -o name | xargs -n 1 kubectl get -o name
```
